version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: zyra-postgres
    environment:
      POSTGRES_DB: zyra_db
      POSTGRES_USER: zyra_user
      POSTGRES_PASSWORD: zyra_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - zyra-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zyra_user -d zyra_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: zyra-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - zyra-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: zyra-backend
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://zyra_user:zyra_password@postgres:5432/zyra_db
      - REDIS_URL=redis://redis:6379
      - PORT=3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - zyra-network
    volumes:
      - ./backend/logs:/app/logs
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./zyra-frontend
      dockerfile: Dockerfile
    container_name: zyra-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:3001/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - zyra-network
    restart: unless-stopped

  # Worker for background jobs
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: zyra-worker
    command: ["npm", "run", "worker"]
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://zyra_user:zyra_password@postgres:5432/zyra_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - zyra-network
    volumes:
      - ./backend/logs:/app/logs
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: zyra-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - zyra-network
    restart: unless-stopped

  # N8N for workflow automation (optional)
  n8n:
    image: n8nio/n8n:latest
    container_name: zyra-n8n
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=zyra_user
      - DB_POSTGRESDB_PASSWORD=zyra_password
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
    ports:
      - "5678:5678"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - zyra-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: zyra-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - zyra-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: zyra-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - zyra-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  zyra-network:
    driver: bridge